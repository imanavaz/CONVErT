<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CONVErT">

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="MenuBackground" Color="#95A5A6" />
    <SolidColorBrush x:Key="MenuForeground" Color="White" />
    <SolidColorBrush x:Key="MenuDisabledForeground" Color="#bdc3c7"/>
    <SolidColorBrush x:Key="MenuDisabledBackground" Color="#ecf0f1"/>
    <SolidColorBrush x:Key="MenuMouseOverBackground" Color="#F1C40F" /> 
    <SolidColorBrush x:Key="MenuMouseOverForeground" Color="Black" />
    <SolidColorBrush x:Key="MenuPressedBackground" Color="#1abc9c" />
    <SolidColorBrush x:Key="MenuPressedForeground" Color="Black" />
    
       
    
    
    <DataTemplate x:Key="ListBoxItemTEmplate">
        <StackPanel>
            <TextBlock x:Name="elementTB" Text="{Binding Path=Name}">
                <TextBlock.Style>
                    <Style>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsPlaceHolder}" Value="True">
                                <Setter Property="TextBlock.Foreground" Value="Red" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsPlaceHolder}" Value="False">
                                <Setter Property="TextBlock.Foreground" Value="Black" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </StackPanel>
    </DataTemplate>

    
    <Style TargetType="{x:Type local:VisualElement}">
        <!--Setter Property="MinWidth" Value="25"/>
        <Setter Property="MinHeight" Value="25" /-->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <!--Setter Property="Grid.ZIndex" Value="1"/-->
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <!--ScaleTransform ScaleX="1.02" ScaleY="1.02"/-->
                        <TranslateTransform X="1" Y="1" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:VisualElement}">
                    <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                        <!--Border Name="Bd" 
                                BorderThickness="2" 
                                CornerRadius="5"              
                                Padding="6"     
                                SnapsToDevicePixels="True"
                                Background="White"
                                BorderBrush="Black"
                                Margin="5"
                                DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                -->
                            <!--TextBlock Text="{Binding Path=EName}" /-->
                            <ContentPresenter/>
                        <!--/Border-->
                        <!-- PART_DragThumb -->
                        <!--local:DragThumb x:Name="PART_DragThumb" Cursor="SizeAll"/-->
                        <!-- PART_ConnectorDecorator -->
                        <!--Control x:Name="PART_ConnectorDecorator"
                                 Visibility="Hidden"
                                 Template="{StaticResource ConnectorDecoratorTemplate}"/-->
                        <Popup x:Name="myPopup" 
                               PopupAnimation="Fade" 
                               VerticalAlignment="Top"
                               IsOpen="{Binding Path=showList}"
                               
                               >
                            <StackPanel Background="Red"
                                    DataContext="{Binding}">
                                
                                <ListBox x:Name="ElementsListBox" ItemsSource="{Binding Path=elementList}">
                                    <!--ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type local:Element}">
                                            <EventSetter Event="ListBoxItem.Drop" Handler="ItemElement_Drop"/>
                                         </Style>
                                    </ListBox.ItemContainerStyle-->
                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="elementTB" Text="{Binding Path=Name}" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                            </StackPanel>
                        </Popup>
                    </Grid>
                    <!--ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="PART_ConnectorDecorator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsDragConnectionOver}">
                            <Setter TargetName="PART_ConnectorDecorator" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style TargetType="{x:Type local:VisualFunction}">
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:VisualFunction}">
                    <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter />
                        <Popup x:Name="myPopup" 
                               PopupAnimation="Fade" 
                               VerticalAlignment="Top"
                               IsOpen="{Binding Path=showList}">
                            <StackPanel Background="LightGray" DataContext="{Binding}">
                                <ListBox x:Name="ElementsListBox" ItemsSource="{Binding Path=elementList}">
                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel x:Name="STP">
                                                <TextBlock Text="{Binding Path=Name}" />
                                            </StackPanel>
                                            
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                            </StackPanel>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style TargetType="{x:Type local:VisualCondition}">
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:VisualCondition}">
                    <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter />
                        <Popup x:Name="myPopup" 
                               PopupAnimation="Fade" 
                               VerticalAlignment="Top"
                               IsOpen="{Binding Path=showList}">
                            <StackPanel Background="LightGray" DataContext="{Binding}">
                                <ListBox x:Name="ElementsListBox" ItemsSource="{Binding Path=elementList}">
                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock Text="{Binding Path=Name}" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                            </StackPanel>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    
    <!-- DragThumb Default Template -->
    <!--Style TargetType="{x:Type local:DragThumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DragThumb}">
                    <Rectangle Fill="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style-->

    <!--Menus and Menue items-->

    <!-- Menu Separator -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"    
       TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle Height="2"        
                           Fill="{DynamicResource MenuDisabledForeground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
                     TargetType="MenuItem">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter Margin="6,3,6,3" 
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"
                                  />
                <Popup Name="Popup"
                       Placement="Bottom"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True" 
                       Focusable="False"
                       PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{DynamicResource MenuBackground}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource MenuBackground}">
                        <StackPanel  IsItemsHost="True" 
                                     KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuMouseOverBackground}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource MenuMouseOverForeground}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <!--Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/-->
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MenuDisabledForeground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource MenuForeground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuPressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MenuPressedBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
                     TargetType="MenuItem">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter Margin="6,3,6,3" 
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuMouseOverBackground}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MenuMouseOverBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource MenuMouseOverForeground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MenuDisabledForeground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource MenuForeground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuPressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MenuPressedBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- SubmenuItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
                     TargetType="MenuItem">
        <Border Name="Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" 
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"/>
                <Border Name="Check"  
                        Width="13" 
                        Height="13" 
                        Visibility="Collapsed"
                        Margin="6,0,6,0" 
                        Background="{DynamicResource MenuBackground}"
                        BorderThickness="1"
                        BorderBrush="{DynamicResource MenuBackground}">
                    <Path Name="CheckMark"
                          Width="7" Height="7" 
                          Visibility="Hidden" 
                          SnapsToDevicePixels="False" 
                          Stroke="{DynamicResource MenuForeground}"
                          StrokeThickness="2"
                          Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,0,2"
                           DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuMouseOverBackground}"/>
                <Setter TargetName="InputGestureText" Property="Foreground" Value="{DynamicResource MenuMouseOverForeground}"/>
                <Setter Property="Foreground" Value="{DynamicResource MenuMouseOverForeground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MenuDisabledForeground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource MenuForeground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuPressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MenuPressedBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" 
                     TargetType="MenuItem">
        <Border Name="Border"  >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"/>
                <ContentPresenter Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" 
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,2,2"
                           DockPanel.Dock="Right"/>
                    <Path Grid.Column="3"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          Data="M 0 0 L 0 7 L 4 3.5 Z" 
                          Fill="{DynamicResource MenuForeground}" />
                <Popup Name="Popup"
                       Placement="Right"
                       HorizontalOffset="-4" 
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True" 
                       Focusable="False"
                       PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{DynamicResource MenuBackground}"
                            BorderBrush="{DynamicResource MenuBackground}"
                            BorderThickness="1" >
                        <StackPanel  IsItemsHost="True" 
                                     KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuMouseOverBackground}"/>
                <Setter TargetName="InputGestureText" Property="Foreground" Value="{DynamicResource MenuMouseOverForeground}"/>
                <Setter Property="Foreground" Value="{DynamicResource MenuMouseOverForeground}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <!--Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/-->
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MenuDisabledForeground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource MenuForeground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuPressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MenuPressedBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="{x:Type MenuItem}" TargetType="MenuItem">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="#95A5A6" />
        <Setter Property="Foreground" Value="White" />
    </Style>


</ResourceDictionary>